#!/usr/bin/env python
"""
                      *                 ***
                     **                   ***
                     **                    **
                     **                    **
                     **                    **       ****
   ***       ****    **  ***      ***      **      * ***  * ***  ****
  * ***     * ***  * ** * ***    * ***     **     *   ****   **** **** *
 *   ***   *   ****  ***   ***  *   ***    **    **    **     **   ****
**    *** **         **     ** **    ***   **    **    **     **    **
********  **         **     ** ********    **    **    **     **    **
*******   **         **     ** *******     **    **    **     **    **
**        **         **     ** **          **    **    **     **    **
****    * ***     *  **     ** ****    *   **     ******      **    **
 *******   *******   **     **  *******    *** *   ****       ***   ***
  *****     *****     **    **   *****      ***                ***   ***
                            *
                           *
                          *
                         *
show permissions of given apks
"""

import mimetypes
import argparse
import os
import sys
from androguard.misc import AnalyzeAPK
import json

VERBOSE = False


def checkFileMimeType(filename):
    global VERBOSE
    """
        import mimetypes
        mimetypes.guess_type("a.js")
        output : ('application/javascript', None)

        Also, it accepts path-like objects.
        Which means that when a bytes object is given,
        It will work successfully.
    """
    APK_MIMETYPE = "application/vnd.android.package-archive"
    m_type = mimetypes.guess_type(filename)
    if VERBOSE:
        print("[INFO] " + str(filename) + " mimetype is " + str(m_type[0]))
    if APK_MIMETYPE == m_type[0]:
        return True
    else:
        return False


def getListOfFiles(directory):
    global VERBOSE
    if VERBOSE:
        print("[INFO] Getting files from the given directory.")
    try:
        lst = os.listdir(directory)
    except:
        print("[ERROR] Error at getting files from the given directory.")
        return None
    if VERBOSE:
        print("[INFO] The given directory has this files")
        for filename in lst:
            print("\t\t " + str(filename))
    return lst


def isThisDangerousPerm(perm_type):
    global VERBOSE
    dangerous_list = ["READ_CALENDAR",
                      "WRITE_CALENDAR",
                      "CAMERA",
                      "READ_CONTACTS",
                      "WRITE_CONTACTS",
                      "GET_ACCOUNTS",
                      "ACCESS_FINE_LOCATION",
                      "ACCESS_COARSE_LOCATION",
                      "RECORD_AUDIO",
                      "READ_PHONE_STATE",
                      "READ_PHONE_NUMBERS",
                      "CALL_PHONE",
                      "ANSWER_PHONE_CALLS",
                      "READ_CALL_LOG",
                      "WRITE_CALL_LOG",
                      "ADD_VOICEMAIL",
                      "USE_SIP",
                      "PROCESS_OUTGOING_CALLS",
                      "BODY_SENSORS",
                      "SEND_SMS",
                      "RECEIVE_SMS",
                      "READ_SMS",
                      "RECEIVE_WAP_PUSH",
                      "RECEIVE_MMS",
                      "READ_EXTERNAL_STORAGE",
                      "WRITE_EXTERNAL_STORAGE",
                      "MOUNT_UNMOUNT_FILESYSTEMS",
                      "READ_HISTORY_BOOKMARKS",
                      "WRITE_HISTORY_BOOKMARKS",
                      "INSTALL_PACKAGES",
                      "RECEIVE_BOOT_COMPLETED",
                      "READ_LOGS",
                      "CHANGE_WIFI_STATE",
                      "DISABLE_KEYGUARD",
                      "GET_TASKS",
                      "BLUETOOTH",
                      "CHANGE_NETWORK_STATE",
                      "ACCESS_WIFI_STATE",
                      ]

    if perm_type in dangerous_list:
        if VERBOSE:
            print("[INFO] " + perm_type + " is a DANGEROUS PERMISSION")
        return True, perm_type
    else:
        return False, None


def readManifest(apk_file: AnalyzeAPK):
    return apk_file.get_permissions()


def analyzeThis(filePath):
    global VERBOSE
    if VERBOSE:
        print("[INFO] Analyzing this file -> " + filePath)

    try:
        a, d, dx = AnalyzeAPK(filePath)
    except:
        print("[ERROR] Error at creating APK Object")

    perms = readManifest(a)
    dangerous_perms = []
    for perm in perms:
        res = isThisDangerousPerm(perm)
        if res:
            dangerous_perms.append(perm)
        else:
            continue
    return dangerous_perms


def parser():

    # our wise parser
    parser = argparse.ArgumentParser()

    # adding arguments
    parser.add_argument(
        "--dir",
        help="Chosen apk directory",
        type=str)
    parser.add_argument(
        "--file",
        help="Chosen apk file",
        type=str)
    parser.add_argument(
        "--verbose",
        help="Verbose Output",
        dest="verbose",
        action='store_true')

    parser.add_argument(
        "--out",
        help="Save output to a file",
        type=str)

    args = parser.parse_args()

    # post values to our process

    if args.dir and args.file:
        print("[ERROR] Bro, what are you trying to do? dont do that.")
        sys.exit(1)

    return args.dir, args.file, args.verbose, args.out


def saveOutput(filename, content):
    global VERBOSE
    try:
        f = open(filename, "w")
        f.write(json.dumps(content).replace(", ", ",\n"))
        if VERBOSE:
            print("[INFO] Output file created at --> " + filename)
        f.close()
    except Exception as err:
        print("[ERROR] Error at creating output file")
        print(err)


def analyzeDirectory(directory):
    report = {}
    true_apk_files = []
    list_of_files = getListOfFiles(directory)
    for f in list_of_files:
        if checkFileMimeType(directory + f):
            true_apk_files.append(f)
        else:
            if VERBOSE:
                print("[MEH] " + str(f) + " <-- " +
                      "file is not an APK file, skipping...")
            continue
    for a_file in true_apk_files:
        dangerous_perms = analyzeThis(directory + a_file)
        if dangerous_perms is not None:
            report[a_file] = dangerous_perms

    return report


if __name__ == "__main__":
    DIR = None
    FILE = None
    OUT = None
    DIR, FILE, VERBOSE, OUT = parser()

    if DIR:
        rep = analyzeDirectory(DIR)
        if OUT:
            saveOutput(os.getcwd() + "/" + OUT + ".report", rep)
        else:
            rep = json.dumps(rep).replace(", ", ",\n")
            print(rep)

    elif FILE:
        rep = analyzeThis(FILE)
        if OUT:
            saveOutput(os.getcwd() + "/" + OUT + ".report", rep)
        else:
            rep = json.dumps(rep).replace(", ", ",\n")
            print(rep)
